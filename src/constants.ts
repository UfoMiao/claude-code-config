import { homedir } from 'node:os';
import { join } from 'pathe';
import type { McpService } from './types';

export const CLAUDE_DIR = join(homedir(), '.claude');
export const SETTINGS_FILE = join(CLAUDE_DIR, 'settings.json');
export const CLAUDE_MD_FILE = join(CLAUDE_DIR, 'CLAUDE.md');
export const ClAUDE_CONFIG_FILE = join(homedir(), '.claude.json');
export const ZCF_CONFIG_FILE = join(homedir(), '.zcf.json');

export const SUPPORTED_LANGS = ['zh-CN', 'en'] as const;
export type SupportedLang = (typeof SUPPORTED_LANGS)[number];

export const LANG_LABELS = {
  'zh-CN': '简体中文',
  en: 'English',
} as const;

export const AI_OUTPUT_LANGUAGES = {
  'zh-CN': { label: '简体中文', directive: 'Always respond in Chinese-simplified' },
  en: { label: 'English', directive: 'Always respond in English' },
  custom: { label: 'Custom', directive: '' },
} as const;

export type AiOutputLanguage = keyof typeof AI_OUTPUT_LANGUAGES;

export const I18N = {
  'zh-CN': {
    multiSelectHint: '（空格选择，a全选，i反选，回车确认）',
    selectScriptLang: '选择ZCF显示语言',
    selectConfigLang: '选择 Claude Code 配置语言',
    selectAiOutputLang: '选择 AI 输出语言',
    aiOutputLangHint: 'AI 将使用此语言回复你的问题',
    enterCustomLanguage: '请输入自定义语言（例如：Japanese, French 等）',
    configLangHint: {
      'zh-CN': '便于中文用户自定义',
      en: '推荐，token 消耗更低',
    },
    installPrompt: '检测到 Claude Code 未安装，是否自动安装？',
    installing: '正在安装 Claude Code...',
    installSuccess: 'Claude Code 安装成功',
    installFailed: 'Claude Code 安装失败',
    npmNotFound: 'npm 未安装。请先安装 Node.js 和 npm。',
    termuxDetected: '检测到 Termux 环境',
    termuxInstallHint: '在 Termux 中，请先运行: pkg install nodejs 或 pkg install nodejs-lts',
    termuxPathInfo: '使用 Termux 路径: {path}',
    termuxEnvironmentInfo: 'Termux 环境通过 pkg 管理器提供 Node.js 和 npm',
    configureApi: '选择 API 认证方式',
    useAuthToken: '使用 Auth Token (OAuth 认证)',
    authTokenDesc: '适用于通过 OAuth 或浏览器登录获取的令牌',
    useApiKey: '使用 API Key (密钥认证)',
    apiKeyDesc: '适用于从 Anthropic Console 获取的 API 密钥',
    skipApi: '跳过（稍后手动配置）',
    enterApiUrl: '请输入 API URL',
    enterAuthToken: '请输入 Auth Token',
    enterApiKey: '请输入 API Key',
    // API modification related
    existingApiConfig: '检测到已有 API 配置：',
    apiConfigUrl: 'URL',
    apiConfigKey: 'Key',
    apiConfigAuthType: '认证类型',
    selectApiAction: '请选择API处理操作',
    keepExistingConfig: '保留现有配置',
    modifyAllConfig: '修改全部配置',
    modifyPartialConfig: '修改部分配置',
    selectModifyItems: '请选择要修改的项',
    modifyApiUrl: '修改 API URL',
    modifyApiKey: '修改 API Key',
    modifyAuthType: '修改认证类型',
    continueModification: '是否继续修改其他配置？',
    modificationSaved: '配置已保存',
    enterNewApiUrl: '请输入新的 API URL（当前：{url}）',
    enterNewApiKey: '请输入新的 API Key（当前：{key}）',
    selectNewAuthType: '选择新的认证类型（当前：{type}）',
    existingConfig: '检测到已有配置文件，如何处理？',
    backupAndOverwrite: '备份并覆盖全部',
    updateDocsOnly: '仅更新工作流相关md并备份旧配置',
    mergeConfig: '合并配置',
    skip: '跳过',
    backupSuccess: '已备份所有配置文件到',
    copying: '正在复制配置文件...',
    configSuccess: '配置文件已复制到',
    apiConfigSuccess: 'API 配置完成',
    mcpConfigSuccess: 'MCP 服务已配置',
    selectMcpServices: '选择要安装的 MCP 服务',
    allServices: '全部安装',
    mcpServiceInstalled: '已选择的 MCP 服务',
    enterExaApiKey: '请输入 Exa API Key（可从 https://dashboard.exa.ai/api-keys 获取）',
    skipMcp: '跳过 MCP 配置',
    configureMcp: '是否配置 MCP 服务？',
    mcpBackupSuccess: '已备份原有 MCP 配置',
    complete: "🎉 配置完成！使用 'claude' 命令开始体验。",
    error: '错误',
    yes: '是',
    no: '否',
    cancelled: '操作已取消',
    apiKeyValidation: {
      empty: 'API Key 不能为空',
      example: '示例格式: sk-abcdef123456_789xyz',
    },
    noExistingConfig: '未找到现有配置。请先运行 `zcf`。',
    updatingPrompts: '正在更新 Claude Code Prompt 文档...',
    updateConfigLangPrompt: '选择配置语言',
    updateConfigLangChoice: {
      'zh-CN': '中文版配置',
      en: '英文版配置',
    },
    // Menu related
    selectFunction: '请选择功能',
    enterChoice: '请输入选项，回车确认',
    menuOptions: {
      fullInit: '完整初始化',
      importWorkflow: '导入工作流',
      configureApi: '配置 API',
      configureMcp: '配置 MCP',
      configureModel: '配置默认模型',
      configureAiMemory: '配置 Claude 全局记忆',
      configureEnvPermission: '导入推荐环境变量和权限配置',
      clearCache: '清除偏好缓存',
      changeLanguage: '更改显示语言 / Select display language',
      exit: '退出',
    },
    menuDescriptions: {
      fullInit: '安装 Claude Code + 导入工作流 + 配置 API + 配置 MCP 服务',
      importWorkflow: '仅导入/更新工作流相关文件',
      configureApi: '配置 API URL 和认证信息',
      configureMcp: '配置 MCP 服务（含 Windows 修复）',
      configureModel: '设置默认模型（opus/sonnet）',
      configureAiMemory: '配置 AI 输出语言和角色风格',
      configureEnvPermission: '导入隐私保护环境变量和系统权限配置',
      clearCache: '清除偏好语言等缓存',
      changeLanguage: '更改 ZCF 界面语言',
    },
    returnToMenu: '返回主菜单？',
    goodbye: '👋 感谢使用 ZCF！再见！',
    // Model config
    selectDefaultModel: '选择默认模型',
    modelConfigSuccess: '默认模型已配置',
    // AI memory config
    selectMemoryOption: '选择配置选项',
    configureAiLanguage: '配置 AI 输出语言',
    configureAiPersonality: '配置 AI 个性风格',
    aiLanguageConfigured: 'AI 输出语言已配置',
    // AI personality
    selectAiPersonality: '选择 AI 个性风格',
    customPersonalityHint: '定义你自己的个性',
    enterCustomPersonality: '请输入自定义个性描述',
    personalityConfigured: 'AI 个性已配置',
    existingPersonality: '检测到已有 AI 个性配置',
    currentPersonality: '当前个性',
    modifyPersonality: '是否修改 AI 个性配置？',
    keepPersonality: '保持当前个性配置',
    // Cache
    confirmClearCache: '确认清除所有 ZCF 偏好缓存？',
    cacheCleared: 'ZCF 缓存已清除',
    noCacheFound: '未找到缓存文件',
    // Language
    languageChanged: '语言已更改',
    // Windows MCP
    fixWindowsMcp: '修复 Windows MCP 配置',
    fixWindowsMcpDesc: '修复 Windows 平台 MCP 命令配置问题',
    windowsMcpFixed: 'Windows MCP 配置已修复',
    configureMcpServices: '配置 MCP 服务',
    selectMcpOption: '选择 MCP 配置选项',
    // Validation messages
    invalidChoice: '无效选择。请输入有效选项。',
    urlRequired: 'URL 为必填项',
    invalidUrl: '无效的 URL',
    keyRequired: '密钥为必填项',
    invalidKeyFormat: '无效的密钥格式',
    directiveCannotBeEmpty: '指令不能为空',
    languageRequired: '语言为必填项',
    // Error messages
    failedToSetOnboarding: '设置入门完成标志失败：',
    failedToWriteMcpConfig: '写入 MCP 配置失败：',
    templateDirNotFound: '模板目录未找到：',
    failedToReadTemplateSettings: '读取模板 settings.json 失败：',
    failedToMergeSettings: '合并 settings.json 失败：',
    preservingExistingSettings: '由于合并错误，保留现有的 settings.json',
    // File system errors
    failedToReadFile: '读取文件失败：',
    failedToWriteFile: '写入文件失败：',
    failedToCopyFile: '复制文件失败：',
    failedToReadDirectory: '读取目录失败：',
    failedToGetStats: '获取文件状态失败：',
    sourceDirNotExist: '源目录不存在：',
    // JSON config errors
    invalidConfiguration: '配置无效，使用默认值',
    failedToParseJson: '解析 JSON 文件失败：',
    failedToBackupConfig: '备份配置文件失败：',
    // MCP errors
    failedToAddOnboardingFlag: '添加 hasCompletedOnboarding 标志失败：',
    // AI personality errors
    failedToApplyPersonality: '应用个性指令失败：',
    // Status messages
    notConfigured: '未配置',
    none: '无',
    // CLI options
    runFullInit: '直接运行完整初始化',
    forceOverwrite: '强制覆盖现有配置',
    initClaudeConfig: '初始化 Claude Code 配置',
    updatePromptsOnly: '仅更新 Claude Code 提示',
    // Environment variables and permissions
    selectEnvPermissionOption: '请选择配置选项',
    importRecommendedEnv: '导入 ZCF 推荐环境变量',
    importRecommendedEnvDesc: '隐私保护变量等',
    importRecommendedPermissions: '导入 ZCF 推荐权限配置',
    importRecommendedPermissionsDesc: '几乎全部权限，减少频繁请求权限，危险操作由规则限制',
    openSettingsJson: '打开 settings.json 手动配置',
    openSettingsJsonDesc: '高级用户自定义',
    envImportSuccess: '环境变量已导入',
    permissionsImportSuccess: '权限配置已导入',
    openingSettingsJson: '正在打开 settings.json...',
    // Misc
    spaceToSelectReturn: '- 空格选择，回车提交',
    // Windows detection
    windowsDetected: '检测到 Windows 系统，将自动配置兼容格式',
    // BMAD agents
    selectWorkflowType: '选择要安装的工作流类型',
    workflowOption: {
      featPlanUx: '功能规划和 UX 设计 (feat + planner + ui-ux-designer)',
      sixStepsWorkflow: '六步工作流 (workflow)',
      bmadWorkflow: 'BMAD 敏捷开发流程 (7个专业AI代理)',
    },
    bmadAgentsTitle: 'BMAD-METHOD 代理',
    selectBmadAgents: '选择要安装的 BMAD 代理',
    bmadAgentInstalled: '已安装 BMAD 代理',
    atLeastOneAgent: '至少选择一个代理',
  },
  en: {
    multiSelectHint: ' (Space to select, a to select all, i to invert, Enter to confirm)',
    selectScriptLang: 'Select ZCF display language',
    selectConfigLang: 'Select Claude Code configuration language',
    selectAiOutputLang: 'Select AI output language',
    aiOutputLangHint: 'AI will respond to you in this language',
    enterCustomLanguage: 'Enter custom language (e.g., Japanese, French, etc.)',
    configLangHint: {
      'zh-CN': 'easier for Chinese users to customize',
      en: 'recommended, lower token consumption',
    },
    installPrompt: 'Claude Code not found. Install automatically?',
    installing: 'Installing Claude Code...',
    installSuccess: 'Claude Code installed successfully',
    installFailed: 'Failed to install Claude Code',
    npmNotFound: 'npm is not installed. Please install Node.js and npm first.',
    termuxDetected: 'Termux environment detected',
    termuxInstallHint: 'In Termux, please run first: pkg install nodejs or pkg install nodejs-lts',
    termuxPathInfo: 'Using Termux path: {path}',
    termuxEnvironmentInfo: 'Termux environment provides Node.js and npm through pkg manager',
    configureApi: 'Select API authentication method',
    useAuthToken: 'Use Auth Token (OAuth authentication)',
    authTokenDesc: 'For tokens obtained via OAuth or browser login',
    useApiKey: 'Use API Key (Key authentication)',
    apiKeyDesc: 'For API keys from Anthropic Console',
    skipApi: 'Skip (configure manually later)',
    enterApiUrl: 'Enter API URL',
    enterAuthToken: 'Enter Auth Token',
    enterApiKey: 'Enter API Key',
    // API modification related
    existingApiConfig: 'Existing API configuration detected:',
    apiConfigUrl: 'URL',
    apiConfigKey: 'Key',
    apiConfigAuthType: 'Auth Type',
    selectApiAction: 'Select API processing operation',
    keepExistingConfig: 'Keep existing configuration',
    modifyAllConfig: 'Modify all configuration',
    modifyPartialConfig: 'Modify partial configuration',
    selectModifyItems: 'Select items to modify',
    modifyApiUrl: 'Modify API URL',
    modifyApiKey: 'Modify API Key',
    modifyAuthType: 'Modify auth type',
    continueModification: 'Continue modifying other configurations?',
    modificationSaved: 'Configuration saved',
    enterNewApiUrl: 'Enter new API URL (current: {url})',
    enterNewApiKey: 'Enter new API Key (current: {key})',
    selectNewAuthType: 'Select new auth type (current: {type})',
    existingConfig: 'Existing config detected. How to proceed?',
    backupAndOverwrite: 'Backup and overwrite all',
    updateDocsOnly: 'Update workflow-related md files only with backup',
    mergeConfig: 'Merge config',
    skip: 'Skip',
    backupSuccess: 'All config files backed up to',
    copying: 'Copying configuration files...',
    configSuccess: 'Config files copied to',
    apiConfigSuccess: 'API configured',
    mcpConfigSuccess: 'MCP services configured',
    selectMcpServices: 'Select MCP services to install',
    allServices: 'Install all',
    mcpServiceInstalled: 'Selected MCP services',
    enterExaApiKey: 'Enter Exa API Key (get from https://dashboard.exa.ai/api-keys)',
    skipMcp: 'Skip MCP configuration',
    configureMcp: 'Configure MCP services?',
    mcpBackupSuccess: 'Original MCP config backed up',
    complete: "🎉 Setup complete! Use 'claude' command to start.",
    error: 'Error',
    yes: 'Yes',
    no: 'No',
    cancelled: 'Operation cancelled',
    apiKeyValidation: {
      empty: 'API Key cannot be empty',
      example: 'Example format: sk-abcdef123456_789xyz',
    },
    noExistingConfig: 'No existing configuration found. Please run `zcf` first.',
    updatingPrompts: 'Updating Claude Code prompt documents...',
    updateConfigLangPrompt: 'Select configuration language',
    updateConfigLangChoice: {
      'zh-CN': 'Chinese configuration',
      en: 'English configuration',
    },
    // Menu related
    selectFunction: 'Select function',
    enterChoice: 'Enter your choice, and press enter',
    menuOptions: {
      fullInit: 'Full initialization',
      importWorkflow: 'Import workflow',
      configureApi: 'Configure API',
      configureMcp: 'Configure MCP',
      configureModel: 'Configure default model',
      configureAiMemory: 'Configure Claude global memory',
      configureEnvPermission: 'Import recommended environment variables and permissions',
      clearCache: 'Clear preference cache',
      changeLanguage: 'Select display language / 更改显示语言',
      exit: 'Exit',
    },
    menuDescriptions: {
      fullInit: 'Install Claude Code + Import workflow + Configure API + Configure MCP services',
      importWorkflow: 'Import/update workflow-related files only',
      configureApi: 'Configure API URL and authentication',
      configureMcp: 'Configure MCP services (includes Windows fix)',
      configureModel: 'Set default model (opus/sonnet)',
      configureAiMemory: 'Configure AI output language and personality',
      configureEnvPermission: 'Import privacy protection environment variables and system permissions',
      clearCache: 'Clear preference language and other caches',
      changeLanguage: 'Change ZCF interface language',
    },
    returnToMenu: 'Return to main menu?',
    goodbye: '👋 Thanks for using ZCF! Goodbye!',
    // Model config
    selectDefaultModel: 'Select default model',
    modelConfigSuccess: 'Default model configured',
    // AI memory config
    selectMemoryOption: 'Select configuration option',
    configureAiLanguage: 'Configure AI output language',
    configureAiPersonality: 'Configure AI personality',
    aiLanguageConfigured: 'AI output language configured',
    // AI personality
    selectAiPersonality: 'Select AI personality',
    customPersonalityHint: 'Define your own personality',
    enterCustomPersonality: 'Enter custom personality description',
    personalityConfigured: 'AI personality configured',
    existingPersonality: 'Existing AI personality configuration',
    currentPersonality: 'Current personality',
    modifyPersonality: 'Modify AI personality?',
    keepPersonality: 'Keeping existing personality',
    // Cache
    confirmClearCache: 'Confirm clear all ZCF preference cache?',
    cacheCleared: 'ZCF cache cleared',
    noCacheFound: 'No cache file found',
    // Language
    languageChanged: 'Language changed',
    // Windows MCP
    fixWindowsMcp: 'Fix Windows MCP Configuration',
    fixWindowsMcpDesc: 'Fix Windows platform MCP command configuration issues',
    windowsMcpFixed: 'Windows MCP configuration fixed',
    configureMcpServices: 'Configure MCP Services',
    selectMcpOption: 'Select MCP configuration option',
    // Validation messages
    invalidChoice: 'Invalid choice. Please enter a valid option.',
    urlRequired: 'URL is required',
    invalidUrl: 'Invalid URL',
    keyRequired: 'Key is required',
    invalidKeyFormat: 'Invalid key format',
    directiveCannotBeEmpty: 'Directive cannot be empty',
    languageRequired: 'Language is required',
    // Error messages
    failedToSetOnboarding: 'Failed to set onboarding completion flag:',
    failedToWriteMcpConfig: 'Failed to write MCP config:',
    templateDirNotFound: 'Template directory not found:',
    failedToReadTemplateSettings: 'Failed to read template settings.json:',
    failedToMergeSettings: 'Failed to merge settings.json:',
    preservingExistingSettings: 'Preserving existing settings.json due to merge error',
    // File system errors
    failedToReadFile: 'Failed to read file:',
    failedToWriteFile: 'Failed to write file:',
    failedToCopyFile: 'Failed to copy file:',
    failedToReadDirectory: 'Failed to read directory:',
    failedToGetStats: 'Failed to get stats for:',
    sourceDirNotExist: 'Source directory does not exist:',
    // JSON config errors
    invalidConfiguration: 'Invalid configuration, using default value',
    failedToParseJson: 'Failed to parse JSON file:',
    failedToBackupConfig: 'Failed to backup config file:',
    // MCP errors
    failedToAddOnboardingFlag: 'Failed to add hasCompletedOnboarding flag:',
    // AI personality errors
    failedToApplyPersonality: 'Failed to apply personality directive:',
    // Status messages
    notConfigured: 'Not configured',
    none: 'None',
    // CLI options
    runFullInit: 'Run full initialization directly',
    forceOverwrite: 'Force overwrite existing configuration',
    initClaudeConfig: 'Initialize Claude Code configuration',
    updatePromptsOnly: 'Update Claude Code prompts only',
    // Environment variables and permissions
    selectEnvPermissionOption: 'Select configuration option',
    importRecommendedEnv: 'Import ZCF recommended environment variables',
    importRecommendedEnvDesc: 'Privacy protection variables, etc.',
    importRecommendedPermissions: 'Import ZCF recommended permissions',
    importRecommendedPermissionsDesc:
      'Almost all permissions, reduce frequent permission requests, dangerous ops limited by rules',
    openSettingsJson: 'Open settings.json for manual configuration',
    openSettingsJsonDesc: 'Advanced user customization',
    envImportSuccess: 'Environment variables imported',
    permissionsImportSuccess: 'Permissions imported',
    openingSettingsJson: 'Opening settings.json...',
    // Misc
    spaceToSelectReturn: '- Space to select. Return to submit',
    // Windows detection
    windowsDetected: 'Windows detected, will configure compatible format',
    // BMAD agents
    selectWorkflowType: 'Select workflow type to install',
    workflowOption: {
      featPlanUx: 'Feature Planning and UX Design (feat + planner + ui-ux-designer)',
      sixStepsWorkflow: 'Six Steps Workflow (workflow)',
      bmadWorkflow: 'BMAD Agile Development Process (7 specialized AI agents)',
    },
    bmadAgentsTitle: 'BMAD-METHOD Agents',
    selectBmadAgents: 'Select BMAD agents to install',
    bmadAgentInstalled: 'Installed BMAD agents',
    atLeastOneAgent: 'You must choose at least one agent',
  },
};

export const MCP_SERVICES: McpService[] = [
  {
    id: 'context7',
    name: { 'zh-CN': 'Context7 文档查询', en: 'Context7 Docs' },
    description: {
      'zh-CN': '查询最新的库文档和代码示例',
      en: 'Query latest library documentation and code examples',
    },
    requiresApiKey: false,
    config: {
      type: 'stdio',
      command: 'npx',
      args: ['-y', '@upstash/context7-mcp'],
      env: {},
    },
  },
  {
    id: 'mcp-deepwiki',
    name: { 'zh-CN': 'DeepWiki', en: 'DeepWiki' },
    description: {
      'zh-CN': '查询 GitHub 仓库文档和示例',
      en: 'Query GitHub repository documentation and examples',
    },
    requiresApiKey: false,
    config: {
      type: 'stdio',
      command: 'npx',
      args: ['-y', 'mcp-deepwiki@latest'],
      env: {},
    },
  },
  {
    id: 'Playwright',
    name: { 'zh-CN': 'Playwright 浏览器控制', en: 'Playwright Browser Control' },
    description: {
      'zh-CN': '直接控制浏览器进行自动化操作',
      en: 'Direct browser control for automation',
    },
    requiresApiKey: false,
    config: {
      type: 'stdio',
      command: 'npx',
      args: ['-y', '@playwright/mcp@latest'],
      env: {},
    },
  },
  {
    id: 'exa',
    name: { 'zh-CN': 'Exa AI 搜索', en: 'Exa AI Search' },
    description: {
      'zh-CN': '使用 Exa AI 进行网页搜索',
      en: 'Web search using Exa AI',
    },
    requiresApiKey: true,
    apiKeyPrompt: {
      'zh-CN': '请输入 Exa API Key',
      en: 'Enter Exa API Key',
    },
    apiKeyEnvVar: 'EXA_API_KEY',
    config: {
      type: 'stdio',
      command: 'npx',
      args: ['-y', 'exa-mcp-server'],
      env: {
        EXA_API_KEY: 'YOUR_EXA_API_KEY',
      },
    },
  },
];
